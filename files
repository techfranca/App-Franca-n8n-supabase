// app/api/auth/login/route.ts
export async function POST(req: Request) {
  const { email, password } = await req.json()

  const VALID_EMAILS = ["gabriel@franca.local", "Gabriel"]
  const VALID_PASSWORD = "Gabriel@102030"

  if (VALID_EMAILS.includes(email) && password === VALID_PASSWORD) {
    return Response.json({
      ok: true,
      data: {
        user: {
          id: "user_gabriel",
          name: "Gabriel",
          email: "gabriel@franca.local",
          role: "admin",
        },
        token: "mock_admin_token",
      },
    })
  }

  return Response.json(
    { ok: false, data: null, error: "Credenciais inválidas" },
    { status: 401 }
  )
}

// app/(auth)/login/page.tsx
import { useState } from 'react'
import { useRouter } from 'next/router'
import { useToast } from 'react-toastify'
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from './components/Card'
import { Label } from './components/Label'
import { Input } from './components/Input'
import { Button } from './components/Button'
import { montserrat } from './fonts'
import { signIn } from './api/auth/login'

function LoginPage() {
  // Component implementation remains unchanged
}

function LoginForm() {
  const router = useRouter()
  const { toast } = useToast()
  const [email, setEmail] = useState("gabriel@franca.local")
  const [password, setPassword] = useState("Gabriel@102030")
  const [pending, setPending] = useState(false)

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault()
    setPending(true)
    const res = await signIn(email, password)
    setPending(false)
    if (res.ok) {
      toast({ title: "Bem-vindo!", description: "Login realizado com sucesso." })
      router.push("/social/overview")
    } else {
      toast({ title: "Erro no login", description: res.error ?? "Tente novamente", variant: "destructive" })
    }
  }

  return (
    <Card className="w-full max-w-sm border-[#4b8655]/30">
      <CardHeader>
        <div className={`${montserrat.className} text-2xl text-[#081534] font-semibold flex items-center gap-2`}>
          <div className="h-9 w-9 rounded-md bg-[#7de08d] text-[#081534] flex items-center justify-center font-bold">
            F.
          </div>
          Franca Insights
        </div>
        <CardTitle className="sr-only">Entrar</CardTitle>
        <CardDescription>Use seu e-mail/usuário e senha para entrar.</CardDescription>
        <div className="mt-2 text-xs rounded-md bg-muted p-2">
          <div className="font-medium text-[#081534]">Acesso temporário</div>
          <div>Login: gabriel@franca.local ou "Gabriel"</div>
          <div>Senha: Gabriel@102030</div>
        </div>
      </CardHeader>
      <CardContent>
        <form className="grid gap-4" onSubmit={onSubmit}>
          <div className="grid gap-2">
            <Label htmlFor="email">E-mail ou usuário</Label>
            <Input
              id="email"
              type="text"
              required
              placeholder="gabriel@franca.local ou Gabriel"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>
          <div className="grid gap-2">
            <Label htmlFor="password">Senha</Label>
            <Input
              id="password"
              type="password"
              required
              placeholder="••••••••"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
          <Button type="submit" disabled={pending} className="bg-[#7de08d] text-[#081534] hover:bg-[#4b8655]">
            {pending ? "Entrando..." : "Entrar"}
          </Button>
        </form>
      </CardContent>
    </Card>
  )
}

export default function Login() {
  return (
    <div>
      <LoginPage />
      <LoginForm />
    </div>
  )
}
